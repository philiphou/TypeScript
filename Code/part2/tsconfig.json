{
    // include 用来指定哪些 ts 文件需要编译；是个数组，数组元素是文件路径
    //  路径： ** 表示任意目录  * 表示任意文件
    "include": ["./src/**/*"], 

    //  " exclude" 是不需要编译的文件，有个默认值，可以不手动设置，默认值是：['node_modules','bower-components','jspm-packages']
    "exclude": [],
    // extends 是继承，表示继承之前的 tsconfig.json文件，然后手动添加额外的配置 语法： “extends":"./src/tsconfig.json"
    "compilerOptions": {
        // target 用来指定ts文件被编译成的ES的版本； 默认型是转换成 ES3,因为 ES3的兼容性较好；可以设置的值： 'es3','es5','es6','es2015','es2016','es2017(-2020)'
        "target": "ES6",
        // module 用来指定使用的模块化的规范； 值可以选： 'commonjs' , 'es6', 'es2015', 'es2020', 'amd', 'ststem'; ES6 = ES2015
       "module":"amd",
    //    lib 是用来指定项目中需要使用的库；可选值有很多。。。有提示；
       "lib":[
           "DOM","ES2015"
       ],
    //    outDir 来指定编译后的文件存放目录；一般是根目录下的 dis 目录： ./dist
       "outDir": "./dist",
       //此处编译好的文件统一放在了 dist 文件目录下
    //  outFile 可以用来将代码合并为一个文件；所有的全局作用域中的代码，会合并到同一个文件中；用了模块化就合并不上了。
        "outFile": "./dist/app.js",
        // allowJS 表示是否对 js 文件进行编译，模式是 false, 如果想编译，改成 true
        "allowJs": false,
        // checkJs 是用来指定是否检查 js 文件的语法规范， 默认值是 false, 如果要检查语法错误，就设置成 true
        "checkJs":false,
        // removeComments: 表示编译后的文件是否要移除注释；默认值是 false, 如果不要注释了，就设置为 true.
        "removeComments": false,
        //  noEmit 就是设置是否生成输出文件；默认是false,表示 生成 (noEmit:false)
        "noEmit": false,
        // noEmitOnError: 表示 当有错误时不生成编译后文件，默认值也是 false 表示要生成
        "noEmitOnError": false,
        // alwaysStrict 表示 编译后的js 文件是否使用严格模式，默认值是 false，如果编译的 ts 中 有模块引入部分，则编译时候默认进入严格模式；
        "alwaysStrict": false,
        // noImplicitAny 其中 any 是ts 中的一个类型，如果定义一个变量但是不指定类型，则这个变量默认就是隐形的any类型；此处该选项会去检查TS 文件中是否不允许隐式的 any 类型；
        "noImplicitAny": false,
        // noImplicitThis 表示不允许不明确类型的this; 默认值是false, 表示允许；
        "noImplicitThis": false,
        // 严格的检查空值, 默认是不检查。比如 let box1 = document.getElementById("box1") 此处box1有可能不存在是 Null, box1?.addEventListener('click',fn(){})
        "strictNullChecks": false,
        // strict 是严格检查的总开关：如果是true,表示所有的严格检查全都开启！一般开发建议，设置为 true;这样使代码更严谨；
        "strict":false

    }
}